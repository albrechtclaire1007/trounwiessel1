<!DOCTYPE html>
<html lang="lb">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Setz d'Buschtawen an d√©i richteg Reiefolleg</title>
    <style>
        @font-face {
            font-family: 'Schoulschreft';
            src: url('https://github.com/albrechtclaire1007/schoulschreft/raw/main/schoulschreft_bold%5B2%5D.TTF') format('truetype');
        }

        body {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Schoulschreft', Arial, sans-serif;
            background-color: white;
            min-height: 100vh;
        }

        .header {
            background-color: #1c2d4f;
            color: white;
            text-align: center;
            padding: 20px;
            font-size: 28px;
            font-weight: bold;
            margin-bottom: 30px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .word-container {
            max-width: 500px;
            margin: 0 auto;
            background: white;
            border: 3px solid #f2ac3b;
            border-radius: 15px;
            padding: 40px;
            text-align: center;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .progress-bar {
            background: #f0f0f0;
            height: 8px;
            border-radius: 4px;
            margin-bottom: 30px;
            overflow: hidden;
        }

        .progress-fill {
            background: linear-gradient(90deg, #1c2d4f, #f2ac3b);
            height: 100%;
            transition: width 0.5s ease;
            border-radius: 4px;
        }

        .word-counter {
            font-size: 18px;
            color: #1c2d4f;
            margin-bottom: 20px;
            font-weight: bold;
        }

        .image-container {
            position: relative;
            margin-bottom: 20px;
        }

        .word-image {
            width: 120px;
            height: 120px;
            object-fit: cover;
            border: 4px solid #f2ac3b;
            border-radius: 10px;
            margin-bottom: 15px;
        }

        .audio-btn {
            position: absolute;
            top: 10px;
            left: 10px;
            width: 40px;
            height: 40px;
            background: #f2ac3b;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #1c2d4f;
            transition: all 0.3s ease;
        }

        .audio-btn:hover {
            background: #e09a2f;
            transform: scale(1.1);
        }

        .speaker-icon {
            width: 20px;
            height: 20px;
            fill: #1c2d4f;
        }

        .scrambled-letters {
            display: flex;
            justify-content: center;
            gap: 8px;
            margin: 20px 0;
            flex-wrap: wrap;
        }

        .letter-box {
            width: 45px;
            height: 45px;
            background: white;
            border: 3px solid #1c2d4f;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            font-weight: bold;
            color: #1c2d4f;
            cursor: grab;
            user-select: none;
            transition: all 0.3s ease;
        }

        .letter-box:hover {
            background: #f0f8ff;
            transform: translateY(-2px);
        }

        .letter-box.dragging {
            opacity: 0.5;
            transform: rotate(5deg);
        }

        .answer-area {
            margin-top: 20px;
        }

        .answer-boxes {
            display: flex;
            justify-content: center;
            gap: 8px;
            margin: 15px 0;
            flex-wrap: wrap;
        }

        .answer-box {
            width: 45px;
            height: 45px;
            border: 3px solid #f2ac3b;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            font-weight: bold;
            color: #1c2d4f;
            background: #fefefe;
            min-height: 45px;
            transition: all 0.3s ease;
        }

        .answer-box.drop-zone {
            border-color: #4CAF50;
            background: #f0fff0;
        }

        .answer-box.filled {
            background: #e8f5e8;
            border-color: #4CAF50;
        }

        .check-btn {
            background: #1c2d4f;
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 25px;
            font-family: 'Schoulschreft', Arial, sans-serif;
            font-size: 16px;
            cursor: pointer;
            margin-top: 15px;
            transition: all 0.3s ease;
        }

        .check-btn:hover {
            background: #2a3f6b;
            transform: translateY(-2px);
        }

        .result {
            margin-top: 15px;
            font-size: 18px;
            font-weight: bold;
            min-height: 25px;
        }

        .correct {
            color: #4CAF50;
        }

        .incorrect {
            color: #f44336;
        }

        .reset-btn {
            background: #f2ac3b;
            color: #1c2d4f;
            border: none;
            padding: 8px 15px;
            border-radius: 20px;
            font-family: 'Schoulschreft', Arial, sans-serif;
            font-size: 14px;
            cursor: pointer;
            margin-left: 10px;
            transition: all 0.3s ease;
        }

        .reset-btn:hover {
            background: #e09a2f;
        }

        .navigation {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 30px;
        }

        .nav-btn {
            background: #1c2d4f;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 25px;
            font-family: 'Schoulschreft', Arial, sans-serif;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 120px;
        }

        .nav-btn:hover:not(:disabled) {
            background: #2a3f6b;
            transform: translateY(-2px);
        }

        .nav-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            opacity: 0.6;
        }

        .completion-message {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            padding: 30px;
            border-radius: 15px;
            margin-top: 30px;
            font-size: 24px;
            font-weight: bold;
            text-align: center;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

        @media (max-width: 768px) {
            .word-container { margin: 0 10px; padding: 25px; }
            .header { font-size: 22px; padding: 15px; }
            .letter-box, .answer-box { width: 40px; height: 40px; font-size: 18px; }
            .navigation { flex-direction: column; gap: 15px; }
            .nav-btn { width: 100%; }
        }
    </style>
</head>
<body>
    <div class="header">
        Setz d'Buschtawen an d√©i richteg Reiefolleg
    </div>

    <div class="container">
        <div class="progress-bar">
            <div class="progress-fill" id="progressFill"></div>
        </div>
        
        <div class="word-counter" id="wordCounter">Wuert 1 vun 6</div>
        
        <div class="word-container" id="currentWord">
            <!-- Current word will be generated by JavaScript -->
        </div>

        <div class="navigation">
            <button class="nav-btn" id="prevBtn" onclick="previousWord()" disabled>‚Üê Zr√©ck</button>
            <button class="nav-btn" id="nextBtn" onclick="nextWord()" disabled>Weider ‚Üí</button>
        </div>

        <div class="completion-message" id="completionMessage" style="display: none;">
            üéâ Gratulatioun! Dir hutt all d'Wierder richteg geschriwwen! üéâ
        </div>
    </div>

    <!-- Shared audio element -->
    <audio id="audio" preload="auto"></audio>

    <script>
        const words = [
            {
                correct: "KROUN",
                scrambled: ["N", "R", "O", "U", "K"],
                image: "https://i.postimg.cc/2qbG0wH6/temp-Image-JCn-WDB.avif",
                pronunciation: "d'Kroun",
                audio: "https://github.com/albrechtclaire1007/trounwiessel/raw/refs/heads/main/M__kroun.mp3"
            },
            {
                correct: "TROUN",
                scrambled: ["R", "N", "T", "U", "O"],
                image: "https://i.postimg.cc/HrP30Ktx/temp-Image-FUGbdk.avif",
                pronunciation: "den Troun",
                audio: "https://github.com/albrechtclaire1007/trounwiessel/raw/refs/heads/main/M__troun.mp3"
            },
            {
                correct: "GROUSSHERZOG",
                scrambled: ["G", "O", "R", "U", "Z", "H", "R", "O", "S", "S", "E", "G"],
                image: "https://i.postimg.cc/CZB7cNv5/temp-Image-JNo-Xc-R.avif",
                pronunciation: "de Groussherzherzog",
                audio: "https://github.com/albrechtclaire1007/trounwiessel/raw/refs/heads/main/M__groussherzog.mp3"
            },
            {
                correct: "ROUDEL√âIW",
                scrambled: ["U", "E", "R", "D", "O", "W", "L", "I", "√â"],
                image: "https://i.postimg.cc/5HYgs3PQ/temp-Image-Dd-Tg-S4.avif",
                pronunciation: "de roude L√©iw",
                audio: "https://github.com/albrechtclaire1007/trounwiessel/raw/refs/heads/main/M__roude%20l%C3%A9iw.mp3"
            },
            {
                correct: "PALAIS",
                scrambled: ["L", "I", "P", "A", "S", "A"],
                image: "https://i.postimg.cc/sBQmTcnh/temp-Imageh35-I3-I.avif",
                pronunciation: "d'Palais",
                audio: "https://github.com/albrechtclaire1007/trounwiessel/raw/refs/heads/main/M__palais.mp3"
            },
            {
                correct: "SCHLASS",
                scrambled: ["H", "S", "C", "A", "L", "S", "S"],
                image: "https://i.postimg.cc/7CG9KVBL/temp-Image-GM1j-Lo.avif",
                pronunciation: "d'Schlass",
                audio: "https://github.com/albrechtclaire1007/trounwiessel/raw/refs/heads/main/M__schlass.mp3"
            }
        ];

        let draggedElement = null;
        let draggedFromIndex = null;
        let draggedFromContainer = null;
        let currentWordIndex = 0;
        let completedWords = new Set();

        const audioEl = document.getElementById('audio');
        let audioEnabled = false;

        function createWordBlock(word, index) {
            return `
                <div class="image-container">
                    <button class="audio-btn" onclick="playAudio()" title="Lauschteren" aria-label="Lauschteren">
                        <svg class="speaker-icon" viewBox="0 0 24 24" aria-hidden="true">
                            <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/>
                        </svg>
                    </button>
                    <img src="${word.image}" alt="${word.pronunciation}" class="word-image" onerror="this.src=''; this.alt='Image failed to load'; this.style.display='none';">
                </div>
                
                <div class="scrambled-letters" id="scrambled-current">
                    ${word.scrambled.map((letter, letterIndex) => 
                        `<div class="letter-box" draggable="true" data-letter="${letter}" data-index="${letterIndex}">${letter}</div>`
                    ).join('')}
                </div>
                
                <div class="answer-area">
                    <div class="answer-boxes" id="answer-current">
                        ${Array(word.correct.length).fill().map((_, i) => 
                            `<div class="answer-box" data-position="${i}"></div>`
                        ).join('')}
                    </div>
                    <button class="check-btn" onclick="checkCurrentAnswer()">Kontroll√©ieren</button>
                    <button class="reset-btn" onclick="resetCurrentWord()">Zr√©cksetzen</button>
                    <div class="result" id="result-current"></div>
                </div>
            `;
        }

        function initializeGame() {
            showCurrentWord();
            updateProgress();
            updateNavigation();
        }

        function showCurrentWord() {
            const container = document.getElementById('currentWord');
            container.innerHTML = createWordBlock(words[currentWordIndex], currentWordIndex);
            
            // Update word counter
            document.getElementById('wordCounter').textContent = `Wuert ${currentWordIndex + 1} vun ${words.length}`;
            
            // Add drag and drop event listeners
            addDragDropListeners();

            // Set audio source for this word & try autoplay
            const src = words[currentWordIndex].audio;
            if (audioEl.src !== src) audioEl.src = src;
            tryAutoplay();
        }

        function tryAutoplay(){
            const playPromise = audioEl.play();
            if (playPromise && typeof playPromise.then === 'function') {
                playPromise.then(() => { audioEnabled = true; }).catch(() => { /* user gesture needed */ });
            }
        }

        function playAudio() {
            audioEl.currentTime = 0;
            audioEl.play().catch(()=>{ /* ignore if blocked */ });
            // small toast feedback
            const toast = document.createElement('div');
            toast.style.position='fixed'; toast.style.top='20px'; toast.style.right='20px';
            toast.style.background='#1c2d4f'; toast.style.color='#fff';
            toast.style.padding='8px 12px'; toast.style.borderRadius='8px';
            toast.style.boxShadow='0 2px 10px rgba(0,0,0,.2)';
            toast.style.fontSize='14px';
            toast.textContent='üîä Lauschteren‚Ä¶';
            document.body.appendChild(toast);
            setTimeout(()=>toast.remove(), 900);
        }

        function addDragDropListeners() {
            document.querySelectorAll('.letter-box').forEach(box => {
                box.addEventListener('dragstart', handleDragStart);
                box.addEventListener('dragend', handleDragEnd);
            });

            document.querySelectorAll('.answer-box').forEach(box => {
                box.addEventListener('dragover', handleDragOver);
                box.addEventListener('drop', handleDrop);
                box.addEventListener('dragenter', handleDragEnter);
                box.addEventListener('dragleave', handleDragLeave);
            });

            const scrambledArea = document.getElementById('scrambled-current');
            if (scrambledArea) {
                scrambledArea.addEventListener('dragover', handleDragOver);
                scrambledArea.addEventListener('drop', handleDropToScrambled);
            }
        }

        function handleDragStart(e) {
            draggedElement = e.target;
            draggedFromContainer = e.target.parentElement;
            draggedFromIndex = Array.from(draggedFromContainer.children).indexOf(e.target);
            e.target.classList.add('dragging');
        }

        function handleDragEnd(e) {
            e.target.classList.remove('dragging');
            draggedElement = null;
            draggedFromContainer = null;
            draggedFromIndex = null;
        }

        function handleDragOver(e) { e.preventDefault(); }

        function handleDragEnter(e) {
            if (e.target.classList.contains('answer-box') && !e.target.textContent) {
                e.target.classList.add('drop-zone');
            }
        }

        function handleDragLeave(e) { e.target.classList.remove('drop-zone'); }

        function handleDrop(e) {
            e.preventDefault();
            e.target.classList.remove('drop-zone');
            if (e.target.classList.contains('answer-box') && !e.target.textContent && draggedElement) {
                e.target.textContent = draggedElement.dataset.letter;
                e.target.classList.add('filled');
                draggedElement.remove();
            }
        }

        function handleDropToScrambled(e) {
            e.preventDefault();
            if (draggedElement && (e.target.classList.contains('scrambled-letters') || e.target.id === 'scrambled-current')) {
                const targetArea = e.target.classList.contains('scrambled-letters') ? e.target : document.getElementById('scrambled-current');
                const letterBox = document.createElement('div');
                letterBox.className = 'letter-box';
                letterBox.draggable = true;
                letterBox.dataset.letter = draggedElement.dataset.letter;
                letterBox.dataset.index = draggedElement.dataset.index;
                letterBox.textContent = draggedElement.dataset.letter;
                targetArea.appendChild(letterBox);
                letterBox.addEventListener('dragstart', handleDragStart);
                letterBox.addEventListener('dragend', handleDragEnd);

                if (draggedFromContainer && draggedFromContainer.id === 'answer-current') {
                    const answerBox = draggedElement.closest('.answer-box');
                    if (answerBox) {
                        answerBox.textContent = '';
                        answerBox.classList.remove('filled');
                    }
                }
                draggedElement.remove();
            }
        }

        function checkCurrentAnswer() {
            const answerBoxes = document.querySelectorAll('#answer-current .answer-box');
            const userAnswer = Array.from(answerBoxes).map(box => box.textContent).join('');
            const correctAnswer = words[currentWordIndex].correct;
            const resultDiv = document.getElementById('result-current');
            
            if (userAnswer === correctAnswer) {
                resultDiv.textContent = '‚úì Richteg!';
                resultDiv.className = 'result correct';
                answerBoxes.forEach(box => {
                    box.style.borderColor = '#4CAF50';
                    box.style.background = '#e8f5e8';
                });
                completedWords.add(currentWordIndex);
                updateProgress();
                updateNavigation();
                if (completedWords.size === words.length) {
                    setTimeout(() => {
                        document.getElementById('completionMessage').style.display = 'block';
                    }, 1000);
                }
            } else if (userAnswer.length === correctAnswer.length) {
                resultDiv.textContent = '‚úó Prob√©ier nach emol!';
                resultDiv.className = 'result incorrect';
            } else {
                resultDiv.textContent = 'Setz all d\'Buschtawen!';
                resultDiv.className = 'result';
            }
        }

        function resetCurrentWord() {
            const answerBoxes = document.querySelectorAll('#answer-current .answer-box');
            answerBoxes.forEach(box => {
                box.textContent = '';
                box.classList.remove('filled');
                box.style.borderColor = '#f2ac3b';
                box.style.background = '#fefefe';
            });
            const scrambledContainer = document.getElementById('scrambled-current');
            scrambledContainer.innerHTML = words[currentWordIndex].scrambled.map((letter, letterIndex) => 
                `<div class="letter-box" draggable="true" data-letter="${letter}" data-index="${letterIndex}">${letter}</div>`
            ).join('');
            document.getElementById('result-current').textContent = '';
            document.getElementById('result-current').className = 'result';
            addDragDropListeners();
        }

        function nextWord() {
            if (currentWordIndex < words.length - 1 && completedWords.has(currentWordIndex)) {
                currentWordIndex++;
                showCurrentWord();
                updateProgress();
                updateNavigation();
            }
        }

        function previousWord() {
            if (currentWordIndex > 0) {
                currentWordIndex--;
                showCurrentWord();
                updateProgress();
                updateNavigation();
            }
        }

        function updateProgress() {
            const progressPercent = (completedWords.size / words.length) * 100;
            document.getElementById('progressFill').style.width = progressPercent + '%';
        }

        function updateNavigation() {
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            prevBtn.disabled = currentWordIndex === 0;
            nextBtn.disabled = !completedWords.has(currentWordIndex) || currentWordIndex === words.length - 1;
        }

        document.addEventListener('DOMContentLoaded', initializeGame);
    </script>
</body>
</html>

